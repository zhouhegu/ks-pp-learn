/*
 * This file is generated by jOOQ.
 */
package com.pp.jooq.model.tables;


import com.pp.jooq.model.Keys;
import com.pp.jooq.model.Meta;
import com.pp.jooq.model.tables.records.MetaRowRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.15"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaRow extends TableImpl<MetaRowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meta.meta_row</code>
     */
    public static final MetaRow META_ROW = new MetaRow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaRowRecord> getRecordType() {
        return MetaRowRecord.class;
    }

    /**
     * The column <code>meta.meta_row.id</code>. 主键
     */
    public final TableField<MetaRowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>meta.meta_row.create_time</code>. 创建时间
     */
    public final TableField<MetaRowRecord, Long> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建时间");

    /**
     * The column <code>meta.meta_row.update_time</code>. 更新时间
     */
    public final TableField<MetaRowRecord, Long> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "更新时间");

    /**
     * The column <code>meta.meta_row.creator</code>. 创建人
     */
    public final TableField<MetaRowRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建人");

    /**
     * The column <code>meta.meta_row.operator</code>. 更新人
     */
    public final TableField<MetaRowRecord, String> OPERATOR = createField(DSL.name("operator"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "更新人");

    /**
     * The column <code>meta.meta_row.table_id</code>. 关联的表ID
     */
    public final TableField<MetaRowRecord, Long> TABLE_ID = createField(DSL.name("table_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "关联的表ID");

    private MetaRow(Name alias, Table<MetaRowRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaRow(Name alias, Table<MetaRowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>meta.meta_row</code> table reference
     */
    public MetaRow(String alias) {
        this(DSL.name(alias), META_ROW);
    }

    /**
     * Create an aliased <code>meta.meta_row</code> table reference
     */
    public MetaRow(Name alias) {
        this(alias, META_ROW);
    }

    /**
     * Create a <code>meta.meta_row</code> table reference
     */
    public MetaRow() {
        this(DSL.name("meta_row"), null);
    }

    public <O extends Record> MetaRow(Table<O> child, ForeignKey<O, MetaRowRecord> key) {
        super(child, key, META_ROW);
    }

    @Override
    public Schema getSchema() {
        return Meta.META;
    }

    @Override
    public Identity<MetaRowRecord, Long> getIdentity() {
        return (Identity<MetaRowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetaRowRecord> getPrimaryKey() {
        return Keys.KEY_META_ROW_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetaRowRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaRowRecord>>asList(Keys.KEY_META_ROW_PRIMARY);
    }

    @Override
    public MetaRow as(String alias) {
        return new MetaRow(DSL.name(alias), this);
    }

    @Override
    public MetaRow as(Name alias) {
        return new MetaRow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaRow rename(String name) {
        return new MetaRow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaRow rename(Name name) {
        return new MetaRow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
