/*
 * This file is generated by jOOQ.
 */
package com.pp.jooq.model.tables;


import com.pp.jooq.model.Keys;
import com.pp.jooq.model.Meta;
import com.pp.jooq.model.tables.records.MetaFieldRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.15"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaField extends TableImpl<MetaFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meta.meta_field</code>
     */
    public static final MetaField META_FIELD = new MetaField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaFieldRecord> getRecordType() {
        return MetaFieldRecord.class;
    }

    /**
     * The column <code>meta.meta_field.id</code>. 主键
     */
    public final TableField<MetaFieldRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>meta.meta_field.table_id</code>. 关联的表ID
     */
    public final TableField<MetaFieldRecord, Long> TABLE_ID = createField(DSL.name("table_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "关联的表ID");

    /**
     * The column <code>meta.meta_field.name</code>. 字段名称
     */
    public final TableField<MetaFieldRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "字段名称");

    /**
     * The column <code>meta.meta_field.type</code>. 字段类型
     */
    public final TableField<MetaFieldRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "字段类型");

    /**
     * The column <code>meta.meta_field.comment</code>. 字段描述
     */
    public final TableField<MetaFieldRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(256).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "字段描述");

    /**
     * The column <code>meta.meta_field.nullable</code>. 是否可空
     */
    public final TableField<MetaFieldRecord, Byte> NULLABLE = createField(DSL.name("nullable"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否可空");

    private MetaField(Name alias, Table<MetaFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaField(Name alias, Table<MetaFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>meta.meta_field</code> table reference
     */
    public MetaField(String alias) {
        this(DSL.name(alias), META_FIELD);
    }

    /**
     * Create an aliased <code>meta.meta_field</code> table reference
     */
    public MetaField(Name alias) {
        this(alias, META_FIELD);
    }

    /**
     * Create a <code>meta.meta_field</code> table reference
     */
    public MetaField() {
        this(DSL.name("meta_field"), null);
    }

    public <O extends Record> MetaField(Table<O> child, ForeignKey<O, MetaFieldRecord> key) {
        super(child, key, META_FIELD);
    }

    @Override
    public Schema getSchema() {
        return Meta.META;
    }

    @Override
    public Identity<MetaFieldRecord, Long> getIdentity() {
        return (Identity<MetaFieldRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetaFieldRecord> getPrimaryKey() {
        return Keys.KEY_META_FIELD_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetaFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaFieldRecord>>asList(Keys.KEY_META_FIELD_PRIMARY);
    }

    @Override
    public MetaField as(String alias) {
        return new MetaField(DSL.name(alias), this);
    }

    @Override
    public MetaField as(Name alias) {
        return new MetaField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaField rename(String name) {
        return new MetaField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaField rename(Name name) {
        return new MetaField(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
