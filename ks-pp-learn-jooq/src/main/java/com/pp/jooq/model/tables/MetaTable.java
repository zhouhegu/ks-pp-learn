/*
 * This file is generated by jOOQ.
 */
package com.pp.jooq.model.tables;


import com.pp.jooq.model.Keys;
import com.pp.jooq.model.Meta;
import com.pp.jooq.model.tables.records.MetaTableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.15"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaTable extends TableImpl<MetaTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meta.meta_table</code>
     */
    public static final MetaTable META_TABLE = new MetaTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaTableRecord> getRecordType() {
        return MetaTableRecord.class;
    }

    /**
     * The column <code>meta.meta_table.id</code>. 主键
     */
    public final TableField<MetaTableRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>meta.meta_table.create_time</code>. 创建时间
     */
    public final TableField<MetaTableRecord, Long> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建时间");

    /**
     * The column <code>meta.meta_table.update_time</code>. 更新时间
     */
    public final TableField<MetaTableRecord, Long> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "更新时间");

    /**
     * The column <code>meta.meta_table.creator</code>. 创建人
     */
    public final TableField<MetaTableRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建人");

    /**
     * The column <code>meta.meta_table.operator</code>. 更新人
     */
    public final TableField<MetaTableRecord, String> OPERATOR = createField(DSL.name("operator"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "更新人");

    /**
     * The column <code>meta.meta_table.table_name</code>. 表名
     */
    public final TableField<MetaTableRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "表名");

    /**
     * The column <code>meta.meta_table.cn_name</code>. 表别名
     */
    public final TableField<MetaTableRecord, String> CN_NAME = createField(DSL.name("cn_name"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "表别名");

    /**
     * The column <code>meta.meta_table.desc</code>. 描述信息
     */
    public final TableField<MetaTableRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(512).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "描述信息");

    /**
     * The column <code>meta.meta_table.namespace</code>. 空间唯一标识
     */
    public final TableField<MetaTableRecord, String> NAMESPACE = createField(DSL.name("namespace"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "空间唯一标识");

    private MetaTable(Name alias, Table<MetaTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaTable(Name alias, Table<MetaTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>meta.meta_table</code> table reference
     */
    public MetaTable(String alias) {
        this(DSL.name(alias), META_TABLE);
    }

    /**
     * Create an aliased <code>meta.meta_table</code> table reference
     */
    public MetaTable(Name alias) {
        this(alias, META_TABLE);
    }

    /**
     * Create a <code>meta.meta_table</code> table reference
     */
    public MetaTable() {
        this(DSL.name("meta_table"), null);
    }

    public <O extends Record> MetaTable(Table<O> child, ForeignKey<O, MetaTableRecord> key) {
        super(child, key, META_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Meta.META;
    }

    @Override
    public Identity<MetaTableRecord, Long> getIdentity() {
        return (Identity<MetaTableRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetaTableRecord> getPrimaryKey() {
        return Keys.KEY_META_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetaTableRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaTableRecord>>asList(Keys.KEY_META_TABLE_PRIMARY);
    }

    @Override
    public MetaTable as(String alias) {
        return new MetaTable(DSL.name(alias), this);
    }

    @Override
    public MetaTable as(Name alias) {
        return new MetaTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaTable rename(String name) {
        return new MetaTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaTable rename(Name name) {
        return new MetaTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
