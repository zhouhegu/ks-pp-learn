/*
 * This file is generated by jOOQ.
 */
package com.pp.jooq.model.tables;


import com.pp.jooq.model.Keys;
import com.pp.jooq.model.Meta;
import com.pp.jooq.model.tables.records.MetaDataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.15"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaData extends TableImpl<MetaDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>meta.meta_data</code>
     */
    public static final MetaData META_DATA = new MetaData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaDataRecord> getRecordType() {
        return MetaDataRecord.class;
    }

    /**
     * The column <code>meta.meta_data.id</code>. 主键
     */
    public final TableField<MetaDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>meta.meta_data.row_id</code>. 行ID
     */
    public final TableField<MetaDataRecord, Long> ROW_ID = createField(DSL.name("row_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "行ID");

    /**
     * The column <code>meta.meta_data.field_id</code>. 字段ID
     */
    public final TableField<MetaDataRecord, Long> FIELD_ID = createField(DSL.name("field_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "字段ID");

    /**
     * The column <code>meta.meta_data.field_value</code>. 字段值
     */
    public final TableField<MetaDataRecord, String> FIELD_VALUE = createField(DSL.name("field_value"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "字段值");

    /**
     * The column <code>meta.meta_data.deleted</code>. 是否删除
     */
    public final TableField<MetaDataRecord, Byte> DELETED = createField(DSL.name("deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除");

    private MetaData(Name alias, Table<MetaDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaData(Name alias, Table<MetaDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>meta.meta_data</code> table reference
     */
    public MetaData(String alias) {
        this(DSL.name(alias), META_DATA);
    }

    /**
     * Create an aliased <code>meta.meta_data</code> table reference
     */
    public MetaData(Name alias) {
        this(alias, META_DATA);
    }

    /**
     * Create a <code>meta.meta_data</code> table reference
     */
    public MetaData() {
        this(DSL.name("meta_data"), null);
    }

    public <O extends Record> MetaData(Table<O> child, ForeignKey<O, MetaDataRecord> key) {
        super(child, key, META_DATA);
    }

    @Override
    public Schema getSchema() {
        return Meta.META;
    }

    @Override
    public Identity<MetaDataRecord, Long> getIdentity() {
        return (Identity<MetaDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MetaDataRecord> getPrimaryKey() {
        return Keys.KEY_META_DATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetaDataRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaDataRecord>>asList(Keys.KEY_META_DATA_PRIMARY);
    }

    @Override
    public MetaData as(String alias) {
        return new MetaData(DSL.name(alias), this);
    }

    @Override
    public MetaData as(Name alias) {
        return new MetaData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaData rename(String name) {
        return new MetaData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaData rename(Name name) {
        return new MetaData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
